package com.uofl.ea;

import java.io.IOException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.uofl.ea.model.EventVO;
import com.uofl.ea.task.EventProcessingTask;

/**
 * This Servlet handles the event generated by MATLAB client.
 */
@WebServlet("/EventHandlerServlet")
public class EventHandlerServlet extends HttpServlet {
	
	private static final long serialVersionUID = 1L;
	
	private ExecutorService executorService = Executors.newFixedThreadPool(20);
       
   
    public EventHandlerServlet() {
        super();
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    	System.out.println("test");
	}


    /**
     * 
     */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		EventVO event = validateAndFetchEvent(request, response);
		if (event != null) {
			executorService.execute(new EventProcessingTask(event));
		}
	}

	/**
	 * This method validates contents of the Event Request and validates the
	 * same.
	 * 
	 * @param request
	 *            the event request.
	 * @return event data.
	 */
	private EventVO validateAndFetchEvent(HttpServletRequest request, HttpServletResponse response) {
		
		// Validate User Name
		String userName = request.getParameter("userName");
		if (userName == null || userName.isEmpty()) {
			/*sendErrorResponse(response, "User Name is invalid.");
			return null;*/
			throw new RuntimeException("User Name is invalid.");
		}
		
		// Validate Event Type
		String eventType = request.getParameter("eventType");
		if (eventType == null || eventType.isEmpty() || !("ON".equalsIgnoreCase(eventType) || "OFF".equalsIgnoreCase(eventType))) {
			throw new RuntimeException("Event Type is invalid.");
			/*sendErrorResponse(response, "Event Type is invalid.");
			return null;*/
		}
		
		//Validate Device Name.
		String deviceName = request.getParameter("deviceName");
		if (deviceName == null || deviceName.isEmpty()) {
			throw new RuntimeException("Device Name is invalid.");
			/*sendErrorResponse(response, "Device Name is invalid.");
			return null;*/
		}

		// Validate Event Time.
		Date eventTime = null;
		String eventTimeStr = request.getParameter("eventTime");
		if (eventTimeStr == null || eventTimeStr.isEmpty()) {
			throw new RuntimeException("Event Time is invalid.");
			/*sendErrorResponse(response, "Event Time is invalid.");
			return null;*/
		} else {
			try {
				eventTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(eventTimeStr);
			} catch (ParseException ex) {
				throw new RuntimeException("Event Time is invalid.");
				/*sendErrorResponse(response, "Event Time is invalid.");
				return null;*/
			}
		}
		if (eventTime == null) {
			throw new RuntimeException("Event Time is invalid.");
			/*sendErrorResponse(response, "Event Time is invalid.");
			return null;*/
		}
		
		// Validate Distance
		Double distance = null;
		String distanceStr = request.getParameter("distance");
		if (distanceStr != null && !distanceStr.isEmpty()) {
			try {
				distance = Double.parseDouble(distanceStr);
			} catch (NumberFormatException ex) {
				// Do nothing as distance is optional.
				distance = null;
			}
		} else {
			throw new RuntimeException("Distance is invalid.");
		}
				
		return new EventVO(userName, eventType, deviceName, new Timestamp(eventTime.getTime()), distance);
	}
	
	/*private void sendErrorResponse(HttpServletResponse response, String errorMessage) {
		response.setStatus(400);
		try {
			response.getWriter().write(errorMessage);
			response.getWriter().flush();
			response.getWriter().close();
		} catch (IOException e) {
			System.err.println("Error while sending error response due to: " + e.getMessage());
			e.printStackTrace();
		}
		
	}*/

	/**
	 * This method would shutdown the executor service when container stops.
	 */
	public void destroy() {
		executorService.shutdown();
	  }

}
